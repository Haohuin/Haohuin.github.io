<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础知识1</title>
      <link href="/2019/06/03/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
      <url>/2019/06/03/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</url>
      
        <content type="html"><![CDATA[<h2 id="1-如何理解：Write-once-Run-anywhere？"><a href="#1-如何理解：Write-once-Run-anywhere？" class="headerlink" title="1. 如何理解：Write once, Run anywhere？"></a>1. 如何理解：Write once, Run anywhere？</h2><pre><code>    当源码(.java文件)编写好后，首先编译生成.class文件（字节码文件）JVM作用是将通用的.class文件翻译成特定平台下的机器码然后运行。1.执行的是字节码(bytecode),而不是二进制码2.java语言跨平台本质上并不是JVM跨平台</code></pre><h2 id="2-JVM，JRE，JDK的区别与联系？"><a href="#2-JVM，JRE，JDK的区别与联系？" class="headerlink" title="2. JVM，JRE，JDK的区别与联系？"></a>2. JVM，JRE，JDK的区别与联系？</h2><h3 id="a-JVM"><a href="#a-JVM" class="headerlink" title="a. JVM:"></a>a. JVM:</h3><pre><code>JVM就是我们常说的java虚拟机，它是整个java实现跨平台的 最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可 以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解 释给本地系统执行。</code></pre><h3 id="b-JRE："><a href="#b-JRE：" class="headerlink" title="b. JRE："></a>b. JRE：</h3><pre><code>JRE是指Java的运行环境，而且在jre目录中有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工 作所需要的类库，而jvm和 lib和起来就称为jre。</code></pre><h3 id="c-JDK："><a href="#c-JDK：" class="headerlink" title="c. JDK："></a>c. JDK：</h3><pre><code>是java开发工具包，有一个src类库源码压缩包、和其他几个声明文件。Bin,include,lib,jre四个文件夹。§ bin: 最主要的是编译器(javac.exe)§ include: java和JVM交互用的头文件§ lib: 类库§ jre: java运行环境</code></pre><h3 id="d-两个jre的联系和区别"><a href="#d-两个jre的联系和区别" class="headerlink" title="d. 两个jre的联系和区别"></a>d. 两个jre的联系和区别</h3><pre><code>jdk里的jre和独立安装的jre完全相同，没有区别，在jdk里的jre既是工具环境又是运行环境。单独出来只是为了满足只有运行没有编写的场景和情形。 HelloWorld.java --&gt;javac 编译 --&gt; HelloWorld.class --&gt;java 解释执行 --&gt; 该系统环境下的机器码(二进制码)--&gt;运行结果</code></pre><h3 id="e-SDK"><a href="#e-SDK" class="headerlink" title="e. SDK"></a>e. SDK</h3><pre><code>是Software Development Kit缩写，泛指所有软件开发工具包。</code></pre><h2 id="3-常见的-Dos-命令"><a href="#3-常见的-Dos-命令" class="headerlink" title="3.     常见的 Dos 命令"></a>3.     常见的 Dos 命令</h2><pre><code>○ 盘符切换：d:○ 列出目录下的所有文件和文件夹：dir○ 创建目录：md aaa○ 删除目录：rd aaa○ 切换路径：cd    § 单级切换：cd aaa    § 多级切换：cd aaa/bbb    § 切换到上一级目录: cd ..    cd ../..    § 切换到根目录：cd /○ 删除文件：del    § del a.txt○ 删除多个文件：    § del *.java    § del *副本*.java○ 清屏：cls○ 退出：exit</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set接口</title>
      <link href="/2019/06/03/Set%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/06/03/Set%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识2</title>
      <link href="/2019/06/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/"/>
      <url>/2019/06/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/</url>
      
        <content type="html"><![CDATA[<p>##数据类型：</p><h5 id="1-Java是一种强类型语言，针对每种数据都提供了对应的数据类型。"><a href="#1-Java是一种强类型语言，针对每种数据都提供了对应的数据类型。" class="headerlink" title="(1) Java是一种强类型语言，针对每种数据都提供了对应的数据类型。"></a>(1) Java是一种强类型语言，针对每种数据都提供了对应的数据类型。</h5><h5 id="2-分类："><a href="#2-分类：" class="headerlink" title="(2) 分类："></a>(2) 分类：</h5><pre><code>A. 基本数据类型B. 引用数据类型：类，接口，数组。</code></pre><h5 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="(3) 类型转换"></a>(3) 类型转换</h5><h6 id="i-boolean类型不参和其他类型进行转换。"><a href="#i-boolean类型不参和其他类型进行转换。" class="headerlink" title="i. boolean类型不参和其他类型进行转换。"></a>i. boolean类型不参和其他类型进行转换。</h6><h6 id="ii-默认转换：要从小到大"><a href="#ii-默认转换：要从小到大" class="headerlink" title="ii. 默认转换：要从小到大"></a>ii. 默认转换：要从小到大</h6><pre><code>A. byte,short,char --&gt; int --&gt; long --&gt; float --&gt; doubleB. byte,short,char之间不相互转换，直接转成int类型参与运算。即使是同一个数据类型的运算，也会先转换成int类型。</code></pre><h5 id="4-运算"><a href="#4-运算" class="headerlink" title="(4) 运算"></a>(4) 运算</h5><h6 id="i-字符运算相当于ASCII码int型运算"><a href="#i-字符运算相当于ASCII码int型运算" class="headerlink" title="i. 字符运算相当于ASCII码int型运算"></a>i. 字符运算相当于ASCII码int型运算</h6><h6 id="ii-字符串运算相当于拼接"><a href="#ii-字符串运算相当于拼接" class="headerlink" title="ii. 字符串运算相当于拼接"></a>ii. 字符串运算相当于拼接</h6><p>##变量：<br>    1.成员变量（instance variable）：又叫做对象变量、类成员变量<br>        随着对象的建立而存在堆内存中。<br>    2.局部变量（local）：声明在方法中的变量。在栈中<br>        只存在于方法中，无法在方法外进行任何操作，<br>    3.类变量（静态变量）static+变量<br>        是一种比较特殊的实例变量，是类中独立于方法之外的变量，用static关键字修饰。在程序加载时就为它在堆中开辟了内存，而且静态变量的生命周期将一直持续到整个系统关闭。</p><p>##运算符：<br>        (1) 算术运算符<br>            i. ++和–放在操作数后面的原理 举例：a = a++;<br>                int temp = a;<br>                a++;<br>                a = temp;<br>        (2) 赋值运算符<br>            i. 赋值运算符“=”特点<br>                A. 赋值运算符从右向左结合<br>                B. 赋值表达式有值=右边表达式的值<br>            ii. 扩展运算符“+=”，“-=”等等<br>                A. 隐含了自动强制转换<br>        (3) 比较运算符<br>            i. 最终结果始终是boolean类型<br>        (4) 逻辑运算符<br>            i. ^:相同则false,不同则true<br>            ii. &amp;&amp;和&amp;的区别，&amp;&amp;有短路效果<br>        (5) 位运算符<br>                a: 判断一个数是否是奇数    a &amp; 1 == 1;<br>                b: 对2 ^ n 取余。        a &amp; (2^n - 1);<br>                c: 如何判断一个数是否是2^n    a &amp; (a-1) == 0<br>                d: 两个整数之间的交换；<br>                e: 有一堆数，都是成对出现的，只有一个单独的，找出这个单独的数<br>                f: 用最有效率的方式求2 * 8的值        2 &lt;&lt; 3;</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2019/05/29/checkout/"/>
      <url>/2019/05/29/checkout/</url>
      
        <content type="html"><![CDATA[<pre><code>几乎花了大半天的时间来布置博客，好忧伤。。。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2019/05/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2019/05/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一次用github搭建静态博客!好happy!!!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
