<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaIO 流（1）IO流介绍</title>
      <link href="/2019/06/08/Java%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/06/08/Java%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-IO-流（1）IO流介绍"><a href="#Java-IO-流（1）IO流介绍" class="headerlink" title="Java IO 流（1）IO流介绍"></a>Java IO 流（1）IO流介绍</h1><h3 id="IO流定义："><a href="#IO流定义：" class="headerlink" title="IO流定义："></a>IO流定义：</h3><pre><code>流的本质是一组单向有序，分起始和终止的数据传输过程。需要导入import java.io.\*</code></pre><h3 id="IO流分类："><a href="#IO流分类：" class="headerlink" title="IO流分类："></a>IO流分类：</h3><h4 id="按数据类型分为：字节流和字符流"><a href="#按数据类型分为：字节流和字符流" class="headerlink" title="按数据类型分为：字节流和字符流"></a>按数据类型分为：字节流和字符流</h4><h5 id="字节流："><a href="#字节流：" class="headerlink" title="字节流："></a>字节流：</h5><pre><code>按字节进行读取（可以处理任意类型数据）</code></pre><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><pre><code>字节流 \+ 编码表（处理纯文本数据优先考虑）</code></pre><p><img src="F:%5Cblog%5Cmyblog%5Csource_posts%5CJava%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D%5C20170105182342227.jpg" alt></p><h4 id="按数据流向分为：输入流和输出流"><a href="#按数据流向分为：输入流和输出流" class="headerlink" title="按数据流向分为：输入流和输出流"></a>按数据流向分为：输入流和输出流</h4><h5 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h5><pre><code>有Reader（字符输入流）、InputStream（字节输入流）</code></pre><h5 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h5><pre><code>有Writer（字符输出流）、OutputStream（字节输出流）</code></pre><h4 id="按复杂程度分为：基本流和包装流"><a href="#按复杂程度分为：基本流和包装流" class="headerlink" title="按复杂程度分为：基本流和包装流"></a>按复杂程度分为：基本流和包装流</h4><h5 id="基本流"><a href="#基本流" class="headerlink" title="基本流"></a>基本流</h5><h5 id="包装流"><a href="#包装流" class="headerlink" title="包装流"></a>包装流</h5><h2 id="IO-流四大基类"><a href="#IO-流四大基类" class="headerlink" title="IO 流四大基类"></a>IO 流四大基类</h2><h3 id="InputStream-（字节输入流）"><a href="#InputStream-（字节输入流）" class="headerlink" title="InputStream （字节输入流）"></a>InputStream （字节输入流）</h3><p><img src="F:%5Cblog%5Cmyblog%5Csource_posts%5CJava%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D%5C%E6%97%A0%E6%A0%87%E9%A2%98.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Closeable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法及成员方法"><a href="#构造方法及成员方法" class="headerlink" title="构造方法及成员方法"></a>构造方法及成员方法</h4><p><code>​InputStream()    //是所有数据输入字节流的基类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>         <span class="title">available</span><span class="params">()</span><span class="comment">//</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readlimit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>    <span class="title">markSupported</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>    <span class="keyword">int</span>  <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>    <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span>    <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br></pre></td></tr></table></figure><h3 id="OutputStream-（字节输出流）"><a href="#OutputStream-（字节输出流）" class="headerlink" title="OutputStream （字节输出流）"></a>OutputStream （字节输出流）</h3><p><img src="F:%5Cblog%5Cmyblog%5Csource_posts%5CJava%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D%5C%E6%97%A0%E6%A0%87%E9%A2%982.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStream</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">OutputStream</span></span></span><br><span class="line"><span class="class">//字节流可以处理以字节为单位的任何数据类型</span></span><br></pre></td></tr></table></figure><h4 id="构造方法及成员方法-1"><a href="#构造方法及成员方法-1" class="headerlink" title="构造方法及成员方法"></a>构造方法及成员方法</h4><p><code>​OutputStream()    //是所有数据输出字节流的基类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_any</span><span class="params">(Any value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_boolean_array</span><span class="params">(<span class="keyword">boolean</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_boolean</span><span class="params">(<span class="keyword">boolean</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_char_array</span><span class="params">(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_char</span><span class="params">(<span class="keyword">char</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">write_Context</span><span class="params">(Context ctx, ContextList contexts)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_double_array</span><span class="params">(<span class="keyword">double</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_double</span><span class="params">(<span class="keyword">double</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">write_fixed</span><span class="params">(BigDecimal value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_float_array</span><span class="params">(<span class="keyword">float</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_float</span><span class="params">(<span class="keyword">float</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_long_array</span><span class="params">(<span class="keyword">int</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_long</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_longlong_array</span><span class="params">(<span class="keyword">long</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_longlong</span><span class="params">(<span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function">W</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_Object</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_octet_array</span><span class="params">(<span class="keyword">byte</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_octet</span><span class="params">(<span class="keyword">byte</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">write_Principal</span><span class="params">(Principal value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_short_array</span><span class="params">(<span class="keyword">short</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_short</span><span class="params">(<span class="keyword">short</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_string</span><span class="params">(String value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_TypeCode</span><span class="params">(TypeCode value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_ulong_array</span><span class="params">(<span class="keyword">int</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_ulong</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_ulonglong_array</span><span class="params">(<span class="keyword">long</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write_ulonglong</span><span class="params">(<span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure><h3 id="Reader-（字符输入流）"><a href="#Reader-（字符输入流）" class="headerlink" title="Reader （字符输入流）"></a>Reader （字符输入流）</h3><p><img src="F:%5Cblog%5Cmyblog%5Csource_posts%5CJava%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D%5C%E6%97%A0%E6%A0%87%E9%A2%985.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Readable</span>, <span class="title">Closeable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法及成员方法-2"><a href="#构造方法及成员方法-2" class="headerlink" title="构造方法及成员方法"></a>构造方法及成员方法</h4><p><code>​Protected Reader()</code></p><p><code>Protected Reader(Object lock)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>   <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readAheadLimit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>        <span class="title">markSupported</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>        <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>        <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span><span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>        <span class="title">read</span><span class="params">(CharBuffer target)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>        <span class="title">ready</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span>        <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br></pre></td></tr></table></figure><h3 id="Writer-（字符输出流）"><a href="#Writer-（字符输出流）" class="headerlink" title="Writer （字符输出流）"></a>Writer （字符输出流）</h3><p><img src="F:%5Cblog%5Cmyblog%5Csource_posts%5CJava%20IO%20%E6%B5%81%EF%BC%881%EF%BC%89IO%E6%B5%81%E4%BB%8B%E7%BB%8D%5C%E6%97%A0%E6%A0%87%E9%A2%984.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">Closeable</span>, <span class="title">Flushable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法及成员函数"><a href="#构造方法及成员函数" class="headerlink" title="构造方法及成员函数"></a>构造方法及成员函数</h4><p><code>​protected    Writer()</code></p><p><code>protected    Writer(Object lock)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Writer        <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">Writer        <span class="title">append</span><span class="params">(CharSequence csq)</span></span></span><br><span class="line"><span class="function">Writer        <span class="title">append</span><span class="params">(CharSequence csq, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">flush</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span><span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">write</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>        <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识1</title>
      <link href="/2019/06/03/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
      <url>/2019/06/03/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</url>
      
        <content type="html"><![CDATA[<h2 id="1-如何理解：Write-once-Run-anywhere？"><a href="#1-如何理解：Write-once-Run-anywhere？" class="headerlink" title="1. 如何理解：Write once, Run anywhere？"></a>1. 如何理解：Write once, Run anywhere？</h2><pre><code>    当源码(.java文件)编写好后，首先编译生成.class文件（字节码文件）JVM作用是将通用的.class文件翻译成特定平台下的机器码然后运行。1.执行的是字节码(bytecode),而不是二进制码2.java语言跨平台本质上并不是JVM跨平台</code></pre><h2 id="2-JVM，JRE，JDK的区别与联系？"><a href="#2-JVM，JRE，JDK的区别与联系？" class="headerlink" title="2. JVM，JRE，JDK的区别与联系？"></a>2. JVM，JRE，JDK的区别与联系？</h2><h3 id="a-JVM"><a href="#a-JVM" class="headerlink" title="a. JVM:"></a>a. JVM:</h3><pre><code>JVM就是我们常说的java虚拟机，它是整个java实现跨平台的 最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可 以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解 释给本地系统执行。</code></pre><h3 id="b-JRE："><a href="#b-JRE：" class="headerlink" title="b. JRE："></a>b. JRE：</h3><pre><code>JRE是指Java的运行环境，而且在jre目录中有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工 作所需要的类库，而jvm和 lib和起来就称为jre。</code></pre><h3 id="c-JDK："><a href="#c-JDK：" class="headerlink" title="c. JDK："></a>c. JDK：</h3><pre><code>是java开发工具包，有一个src类库源码压缩包、和其他几个声明文件。Bin,include,lib,jre四个文件夹。§ bin: 最主要的是编译器(javac.exe)§ include: java和JVM交互用的头文件§ lib: 类库§ jre: java运行环境</code></pre><h3 id="d-两个jre的联系和区别"><a href="#d-两个jre的联系和区别" class="headerlink" title="d. 两个jre的联系和区别"></a>d. 两个jre的联系和区别</h3><pre><code>jdk里的jre和独立安装的jre完全相同，没有区别，在jdk里的jre既是工具环境又是运行环境。单独出来只是为了满足只有运行没有编写的场景和情形。 HelloWorld.java --&gt;javac 编译 --&gt; HelloWorld.class --&gt;java 解释执行 --&gt; 该系统环境下的机器码(二进制码)--&gt;运行结果</code></pre><h3 id="e-SDK"><a href="#e-SDK" class="headerlink" title="e. SDK"></a>e. SDK</h3><pre><code>是Software Development Kit缩写，泛指所有软件开发工具包。</code></pre><h2 id="3-常见的-Dos-命令"><a href="#3-常见的-Dos-命令" class="headerlink" title="3.     常见的 Dos 命令"></a>3.     常见的 Dos 命令</h2><pre><code>○ 盘符切换：d:○ 列出目录下的所有文件和文件夹：dir○ 创建目录：md aaa○ 删除目录：rd aaa○ 切换路径：cd    § 单级切换：cd aaa    § 多级切换：cd aaa/bbb    § 切换到上一级目录: cd ..    cd ../..    § 切换到根目录：cd /○ 删除文件：del    § del a.txt○ 删除多个文件：    § del *.java    § del *副本*.java○ 清屏：cls○ 退出：exit</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识2</title>
      <link href="/2019/06/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/"/>
      <url>/2019/06/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/</url>
      
        <content type="html"><![CDATA[<p>##数据类型：</p><h5 id="1-Java是一种强类型语言，针对每种数据都提供了对应的数据类型。"><a href="#1-Java是一种强类型语言，针对每种数据都提供了对应的数据类型。" class="headerlink" title="(1) Java是一种强类型语言，针对每种数据都提供了对应的数据类型。"></a>(1) Java是一种强类型语言，针对每种数据都提供了对应的数据类型。</h5><h5 id="2-分类："><a href="#2-分类：" class="headerlink" title="(2) 分类："></a>(2) 分类：</h5><pre><code>A. 基本数据类型B. 引用数据类型：类，接口，数组。</code></pre><h5 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="(3) 类型转换"></a>(3) 类型转换</h5><h6 id="i-boolean类型不参和其他类型进行转换。"><a href="#i-boolean类型不参和其他类型进行转换。" class="headerlink" title="i. boolean类型不参和其他类型进行转换。"></a>i. boolean类型不参和其他类型进行转换。</h6><h6 id="ii-默认转换：要从小到大"><a href="#ii-默认转换：要从小到大" class="headerlink" title="ii. 默认转换：要从小到大"></a>ii. 默认转换：要从小到大</h6><pre><code>A. byte,short,char --&gt; int --&gt; long --&gt; float --&gt; doubleB. byte,short,char之间不相互转换，直接转成int类型参与运算。即使是同一个数据类型的运算，也会先转换成int类型。</code></pre><h5 id="4-运算"><a href="#4-运算" class="headerlink" title="(4) 运算"></a>(4) 运算</h5><h6 id="i-字符运算相当于ASCII码int型运算"><a href="#i-字符运算相当于ASCII码int型运算" class="headerlink" title="i. 字符运算相当于ASCII码int型运算"></a>i. 字符运算相当于ASCII码int型运算</h6><h6 id="ii-字符串运算相当于拼接"><a href="#ii-字符串运算相当于拼接" class="headerlink" title="ii. 字符串运算相当于拼接"></a>ii. 字符串运算相当于拼接</h6><p>##变量：<br>    1.成员变量（instance variable）：又叫做对象变量、类成员变量<br>        随着对象的建立而存在堆内存中。<br>    2.局部变量（local）：声明在方法中的变量。在栈中<br>        只存在于方法中，无法在方法外进行任何操作，<br>    3.类变量（静态变量）static+变量<br>        是一种比较特殊的实例变量，是类中独立于方法之外的变量，用static关键字修饰。在程序加载时就为它在堆中开辟了内存，而且静态变量的生命周期将一直持续到整个系统关闭。</p><p>##运算符：<br>        (1) 算术运算符<br>            i. ++和–放在操作数后面的原理 举例：a = a++;<br>                int temp = a;<br>                a++;<br>                a = temp;<br>        (2) 赋值运算符<br>            i. 赋值运算符“=”特点<br>                A. 赋值运算符从右向左结合<br>                B. 赋值表达式有值=右边表达式的值<br>            ii. 扩展运算符“+=”，“-=”等等<br>                A. 隐含了自动强制转换<br>        (3) 比较运算符<br>            i. 最终结果始终是boolean类型<br>        (4) 逻辑运算符<br>            i. ^:相同则false,不同则true<br>            ii. &amp;&amp;和&amp;的区别，&amp;&amp;有短路效果<br>        (5) 位运算符<br>                a: 判断一个数是否是奇数    a &amp; 1 == 1;<br>                b: 对2 ^ n 取余。        a &amp; (2^n - 1);<br>                c: 如何判断一个数是否是2^n    a &amp; (a-1) == 0<br>                d: 两个整数之间的交换；<br>                e: 有一堆数，都是成对出现的，只有一个单独的，找出这个单独的数<br>                f: 用最有效率的方式求2 * 8的值        2 &lt;&lt; 3;</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
